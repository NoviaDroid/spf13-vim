UnBundle 'bling/vim-bufferline'

silent function! OSX()
return has('macunix')
endfunction
silent function! LINUX()
return has('unix') && !has('macunix') && !has('win32unix')
endfunction
silent function! WINDOWS()
return  (has('win16') || has('win32') || has('win64'))
endfunction

if LINUX() && has("gui_running")
    set gfn=Ubuntu\ Mono\ derivative\ Powerline\ 14
elseif OSX() && has("gui_running")
    set gfn=Ubuntu\ Mono\ derivative\ Powerline:h18
elseif WINDOWS() && has("gui_running")
    set gfn=Ubuntu\ Mono\ derivative\ Powerline:h14
endif

let g:airline_theme = 'hybrid'
colorscheme apprentice

set cursorline                  " Highlight current line
hi CursorLine   cterm=NONE ctermbg=237 ctermfg=NONE guibg=#444444

highlight clear SignColumn      " SignColumn should match background
highlight clear LineNr          " Current line number row will have same background color in relative mode
"highlight clear CursorLineNr    " Remove highlight color from current line number

set go-=L
set go-=R
set go-=l
set go-=r
set nospell

if OSX()
    set macmeta
endif

" fix meta-keys which generate <Esc>a .. <Esc>z
let c='a'
while c <= 'z'
  exec "set <M-".toupper(c).">=\e".c
  exec "imap \e".c." <M-".toupper(c).">"
  let c = nr2char(1+char2nr(c))
endw

let g:airline_powerline_fonts=1
let g:airline_left_sep=''
let g:airline_left_alt_sep='|'
let g:airline_right_sep=''
let g:airline_right_alt_sep='|'
let g:airline#extensions#tabline#left_sep=''
let g:airline#extensions#tabline#left_alt_sep='|'
let g:airline_enable_syntastic=1
let g:airline_detect_paste=1
" Enable the list of buffers
let g:airline#extensions#tabline#enabled=1
" Show just the filename
let g:airline#extensions#tabline#fnamemod=':t'

let NERDTreeQuitOnOpen=0
let g:nerdtree_tabs_open_on_gui_startup=1
let g:nerdtree_tabs_open_on_new_tab=1
let NERDTreeMouseMode=1

let g:EclimCompletionMethod='omnifunc'

if !exists('g:neocomplcache_force_omni_patterns')
  let g:neocomplcache_force_omni_patterns = {}
endif
let g:neocomplcache_force_omni_patterns.java = '\k\.\k*'

let g:SuperTabDefaultCompletionType='context'
let NERDTreeShowBookmarks=1
let g:tagbar_iconchars=['+', '-']
let delimitMate_expand_cr=1
let delimitMate_expand_space=1 

" ctrlp speed up
let g:ctrlp_match_func={ 'match': 'pymatcher#PyMatch' }
let g:ctrlp_use_caching = 1
" Set delay to prevent extra search
let g:ctrlp_lazy_update=350

" Do not clear filenames cache, to improve CtrlP startup
" You can manualy clear it by <F5>
let g:ctrlp_clear_cache_on_exit=0
" Set no file limit, we are building a big project
let g:ctrlp_max_files=0

if exists("g:ctrlp_user_command")
    unlet g:ctrlp_user_command
endif

if executable('ag')
    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command =
                \ 'ag %s --files-with-matches -g "" --ignore "\.git$\|\.hg$\|\.svn$"'
else
    " Fall back to using git ls-files if Ag is not available
    let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$'
    let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others']
endif

augroup nonvim
    au!
    au BufRead *.png,*.bmp,*.jpg,*.pdf,*.gif,*.xls*,*.scpt sil exe "!open " . shellescape(expand("%:p")) | bd | let &ft=&ft | redraw!
    " au BufRead *.ppt*,*.doc*,*.rtf sil exe "!open " . shellescape(expand("%:p")) | bd | let &ft=&ft | redraw!
    au BufRead *.ppt*,*.doc*,*.rtf let g:output_pdf = shellescape(expand("%:r") . ".pdf")
    au BufRead *.ppt*,*.doc*,*.rtf sil exe "!$HOME/.bin/pdf " . shellescape(expand("%:p"))
    au BufRead *.ppt*,*.doc*,*.rtf sil exe "!open " . g:output_pdf | bd | let &ft=&ft | redraw!
augroup end

"let g:ycm_key_list_select_completion=[‘<C-TAB>’, ‘<Down>’]
"let g:ycm_key_list_previous_completion=[‘<C-S-TAB>’, ‘<Up>’]
"let g:SuperTabDefaultCompletionType=‘<C-Tab>’
"
map <leader>nf :NERDTreeFind<cr>
map <leader>sc :JavaSearchContext<cr>
map <Leader>jc :JavaCorrect<cr>
"map <C-1> :JavaCorrect<cr>
map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-L> <C-W>l
map <C-H> <C-W>h
nmap <C-t> :CtrlP .<cr>
if OSX() && has("gui_running")
    "map <D-1> :JavaCorrect<cr>
    map <D-J> <C-W>j
    map <D-K> <C-W>k
    map <D-L> <C-W>l
    map <D-H> <C-W>h
    map <D-d> <C-d>
    map <D-u> <C-u>
    map <D-p> <C-p>
    map <D-t> <C-t>
endif
